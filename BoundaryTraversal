import java.util.*;


class Binarytree{
    static Node root;
    class Node{
        int data;
        Node left,right;
        Node(int data){
            this.data=data;
        }
    }
    static Queue<Node> q=new LinkedList<Node>();
    void insert(int x){
        Node p=new Node(x);
                if(x==0){
            p=null;
        }

        if(root==null){
        root=p;
        return;
        }
        
        q.add(root);
        
        while(!q.isEmpty()){
        
        Node temp=q.poll();
        
        if(temp.left==null){
            temp.left=p;
            return;
        }
        else{
            q.add(temp.left);
        }
        
        if(temp.right==null){
            temp.right=p;
            return;
        }
        else{
            q.add(temp.right);
        }
            
        }
       
       
        
    }
    void PrintleftBoundary(Node root){
        if(root!=null){
            if(root.left!=null){
                System.out.println(root.data);
                PrintleftBoundary(root.left);
                
            }
            else if(root.right!=null){
                System.out.println(root.data);
                PrintleftBoundary(root.right);
            }
        }
    }
     void PrintRightBoundary(Node root){
        if(root!=null){
            if(root.right!=null){
                System.out.println(root.data);
                PrintRightBoundary(root.right);
                
            }
            else if(root.left!=null){
                System.out.println(root.data);
                PrintleftBoundary(root.left);
            }
        }
    }
    
    void PrintLeaves(Node root){
        if(root!=null){
            PrintLeaves(root.left);
            
            if(root.left==null && root.right==null)
            System.out.println(root.data);
            PrintLeaves(root.right);
        }
    }
    void BoundaryTraversal(){
        System.out.println(root.data);
        PrintleftBoundary(root.left);
        PrintLeaves(root);
        PrintRightBoundary(root.right);
    }
    public static void main(String[] args){
        Binarytree t=new Binarytree();
        t.insert(1);
        t.insert(2);
        t.insert(3);
        t.insert(3);
        t.insert(5);
        t.insert(6);
        t.insert(7);
        t.insert(0);
        t.insert(4);
        t.insert(8);
        t.insert(0);
        t.insert(0);
        t.insert(0);
        t.insert(0);
                t.insert(5);

        t.BoundaryTraversal();
    }
}
