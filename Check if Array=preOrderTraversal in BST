import java.util.*;
import java.util.Stack;

class Binarytree{
    static Node root;
    static Stack<Integer> s=new Stack<Integer>();
    class Node{
        int data;
        Node left,right;
        Node(int data){
            this.data=data;
        }
        
    }
    
    void insert(int x){
        root=insertRec(root,x);
    }
    Node insertRec(Node root,int x){
        
        if(root==null){
            root=new Node(x);
            return root;
        }
        if(x>root.data)
        root.right=insertRec(root.right,x);
        else if(x<root.data)
        root.left=insertRec(root.left,x);
        
        return root;
    }
     void preorder(Node root)
            {
                if(root==null)
                return;
                
                s.push(root.data);
                 preorder(root.left);
                preorder(root.right);
                
            }
    boolean compare(int a[]){
    if(a.length==s.size()){
            for(int i=a.length-1;i>=0;i--)
            {
                                System.out.println(s.peek());

                if(s.peek()==a[i])
                    s.pop();
                
            }
            if(s.isEmpty())
            return true;
            else 
            return false;
    }
    else
    return false;
    }
    public static void main(String[] args){
        Binarytree t=new Binarytree();
        t.insert(10);
                t.insert(6);
        t.insert(13);
        t.insert(5);
        t.insert(7);
        t.preorder(root);
        int a[]={10,6,5,7,13};
        System.out.println(t.compare(a));

    }
    
}
